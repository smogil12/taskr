version: '3.8'

services:
  # PostgreSQL Database - Local Development
  postgres:
    image: postgres:15-alpine
    container_name: tail-ai-postgres
    environment:
      POSTGRES_DB: taskr_dev
      POSTGRES_USER: taskr_user
      POSTGRES_PASSWORD: taskr_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tail-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskr_user -d taskr_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database - Staging (Optional local staging)
  postgres-staging:
    image: postgres:15-alpine
    container_name: tail-ai-postgres-staging
    environment:
      POSTGRES_DB: taskr_staging
      POSTGRES_USER: taskr_staging_user
      POSTGRES_PASSWORD: taskr_staging_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tail-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskr_staging_user -d taskr_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - staging

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tail-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tail-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: tail-ai-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - tail-ai-network

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: tail-ai-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - tail-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: tail-ai-backend
    environment:
      DATABASE_URL: "postgresql://taskr_user:taskr_password@postgres:5432/taskr_dev"
      JWT_SECRET: "your-super-secret-jwt-key-here"
      JWT_EXPIRES_IN: "7d"
      PORT: 3001
      NODE_ENV: "development"
      CORS_ORIGIN: "http://localhost:3000"
      GOOGLE_CLIENT_ID: "29558875450-1ueo1kqp6tndelbkd69p9vl6nnj8cov4.apps.googleusercontent.com"
      GOOGLE_CLIENT_SECRET: "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"
      GOOGLE_REDIRECT_URI: "http://localhost:3001/api/calendar/oauth/callback"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tail-ai-network
    volumes:
      - ../backend:/app
      - /app/node_modules

volumes:
  postgres_data:
  postgres_staging_data:
  redis_data:
  minio_data:

networks:
  tail-ai-network:
    driver: bridge
