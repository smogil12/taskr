generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  email                    String               @unique
  name                     String
  password                 String
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  isEmailVerified          Boolean              @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  subscriptionTier         SubscriptionTier     @default(FREE)
  stripeCustomerId         String?
  subscriptionId           String?
  subscriptionEnds         DateTime?
  googleCalendarConnected  Boolean              @default(false)
  googleAccessToken        String?
  googleRefreshToken       String?
  editedClients            Client[]             @relation("ClientEditor")
  clients                  Client[]
  organizations            OrganizationMember[]
  editedProjects           Project[]            @relation("ProjectEditor")
  projects                 Project[]
  subscriptions            Subscription?
  tasks                    Task[]
  createdTasks             Task[]               @relation("TaskCreator")
  editedTasks              Task[]               @relation("TaskEditor")
  invitedTeamMembers       TeamMember[]         @relation("TeamInviter")
  teamMembers              TeamMember[]
  timeEntries              TimeEntry[]

  @@map("users")
}

model TeamMember {
  id         String    @id @default(cuid())
  email      String    @unique
  role       UserRole  @default(MEMBER)
  status     String    @default("PENDING")
  invitedAt  DateTime  @default(now())
  acceptedAt DateTime?
  userId     String?
  invitedBy  String
  expiresAt  DateTime? @db.Timestamp(6)
  inviter    User      @relation("TeamInviter", fields: [invitedBy], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model Client {
  id               String    @id @default(cuid())
  name             String
  email            String?
  phone            String?
  company          String?
  address          String?
  notes            String?
  hourlyRate       Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  lastEditedAt     DateTime?
  lastEditedBy     String?
  lastEditedByUser User?     @relation("ClientEditor", fields: [lastEditedBy], references: [id], map: "clients_lasteditedby_fkey")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects         Project[]

  @@map("clients")
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  members     OrganizationMember[]
  projects    Project[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("MEMBER")
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Project {
  id               String        @id @default(cuid())
  name             String
  description      String?
  status           ProjectStatus @default(PLANNING)
  startDate        DateTime
  endDate          DateTime?
  progress         Int           @default(0)
  allocatedHours   Float         @default(0)
  consumedHours    Float         @default(0)
  remainingHours   Float         @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  clientId         String?
  organizationId   String?
  lastEditedAt     DateTime?
  lastEditedBy     String?
  client           Client?       @relation(fields: [clientId], references: [id])
  lastEditedByUser User?         @relation("ProjectEditor", fields: [lastEditedBy], references: [id], map: "projects_lasteditedby_fkey")
  organization     Organization? @relation(fields: [organizationId], references: [id])
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks            Task[]
  timeEntries      TimeEntry[]

  @@map("projects")
}

model Task {
  id               String       @id @default(cuid())
  title            String
  description      String?
  priority         TaskPriority @default(MEDIUM)
  status           TaskStatus   @default(TODO)
  dueDate          DateTime?
  estimatedHours   Float?
  actualHours      Float?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  calendarEventId  String?
  calendarEventUrl String?
  projectId        String
  assignedTo       String?
  createdBy        String?
  lastEditedAt     DateTime?
  lastEditedBy     String?
  assignedUser     User?        @relation(fields: [assignedTo], references: [id])
  createdByUser    User?        @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade, map: "tasks_createdby_fkey")
  lastEditedByUser User?        @relation("TaskEditor", fields: [lastEditedBy], references: [id], map: "tasks_lasteditedby_fkey")
  project          Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries      TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  hours       Float?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  projectId   String
  taskId      String?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?     @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Subscription {
  id                   String   @id @default(cuid())
  stripeSubscriptionId String   @unique
  userId               String   @unique
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}
