// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription fields
  subscriptionTier SubscriptionTier @default(FREE)
  stripeCustomerId String?
  subscriptionId   String?
  subscriptionEnds DateTime?

  // Relations
  projects   Project[]
  tasks      Task[]
  timeEntries TimeEntry[]
  organizations OrganizationMember[]
  subscriptions Subscription[]
  clients    Client[]     // User can own multiple clients

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  address     String?
  notes       String?
  hourlyRate  Float?   // Default billing rate for this client
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projects    Project[]
  userId      String   // Client owner
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  projects Project[]

  @@map("organizations")
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           String @default("MEMBER") // OWNER, ADMIN, MEMBER
  joinedAt       DateTime @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  progress    Int           @default(0) // 0-100
  
  // Hour allocation and tracking
  allocatedHours    Float   @default(0) // Total hours allocated to this project
  consumedHours     Float   @default(0) // Hours consumed by completed tasks
  remainingHours    Float   @default(0) // Available hours (calculated field)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId         String
  clientId       String?     // Project can be assigned to a client
  organizationId String?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: SetNull)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  tasks          Task[]
  timeEntries    TimeEntry[]

  @@map("projects")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus  @default(TODO)
  dueDate     DateTime?
  estimatedHours Float?   // Estimated hours for this task
  actualHours    Float?   // Actual hours spent (from time entries)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projectId   String
  assignedTo  String?
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUser User?  @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  timeEntries TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // in milliseconds
  hours       Float?   // Calculated hours from duration
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  projectId String
  taskId    String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task      Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("time_entries")
}

model Subscription {
  id                String   @id @default(cuid())
  stripeSubscriptionId String @unique
  userId            String   @unique
  status            String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
